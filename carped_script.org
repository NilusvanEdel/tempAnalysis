#+TITLE:Analysis script for online acceptability study: occupant-pedestrian dilemmas
#+LaTeX_CLASS: koma-article
#+LaTeX_CLASS_OPTIONS: [colorlinks=true,linkcolor=black]
#+LaTeX_HEADER: \usepackage[margin=0in]{geometry}
#+AUTHOR: Autonomous Vehicles Study Project 2017
-----
* Cleaning the data with python
#+BEGIN_SRC python :session *Python* :tangle clean_online_accept.py
import csv
import glob
import os

### where the dataFiles are stored
path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'online_accept_data')) + '/'
### where the created Files will be stored
csvFile = os.path.abspath(os.path.join(os.path.dirname(__file__), 'online_accept_data/raw/data.xls'))

fullCSV = []
counter = 0
with open(csvFile, encoding='utf16') as csvfile:
    reader = csv.reader(csvfile, delimiter = '\t')
    for row in reader:
        if counter == 0:
            firstRow = row
            counter += 1
        else:
            fullCSV.append(row)
# remove empty rows
for row in fullCSV:
    if not any(row):
        fullCSV.remove(row)
        #print("row removed")
# remove empty columns
# transpose the matrix so index of firstRow equals row of matrix
fullCSV = list(map(list, zip(*fullCSV)))
for column in fullCSV:
    if not any(column):
        del (firstRow[fullCSV.index(column)])
        fullCSV.remove(column)
        #print("column removed")

# remove 'completed'
fullCSV.pop(0)
del (firstRow[0])
# remove 'session nr, Session_Name, Session_Start_Time, Session_End_Time, Block_Nr, Block_Name, Task_Nr
for i in range(7):
    fullCSV.pop(2)
    del (firstRow[2])
# remove something
for i in range(2):
    fullCSV.pop(3)
    del firstRow[3]

# add several rows into one (first_vid etc.)
import collections
duplicates =  [item for item, count in collections.Counter(firstRow).items() if count > 1]
print(duplicates)
for item in duplicates:
    index = [i for i, x in enumerate(firstRow) if x == item]
    print(index)
    counter = 0
    for i in index:
        if i == index[0]: continue
        fullCSV[index[0]] = [a + b for a, b in zip(fullCSV[index[0]], fullCSV[i-counter])]
        del (firstRow[i - counter])
        fullCSV.pop(i - counter)
        counter += 1

#remove Agent_Spec and Crowdsourcing_Code
for i in range(2):
    del (firstRow[-1])
    fullCSV.pop(-1)
# remove own SUBJECT id
del (firstRow[6])
fullCSV.pop(6)

# transpose the matrix again
fullCSV = list(map(list, zip(*fullCSV)))

failedSanCheck = []
counter = 0
oldID = -1
ind = 0
while ind < len(fullCSV):
    while ind <= len(fullCSV)-1 and ("disc" in fullCSV[ind][2]
                                     or "inst" in fullCSV[ind][2]):
        fullCSV.pop(ind)
    if ind <= len(fullCSV)-1 and "sanity" in fullCSV[ind][2]:
        counter += 1
        if "stay" in fullCSV[ind][6]:
            failedSanCheck.append(fullCSV[ind][0])
        fullCSV.pop(ind)
        ind -= 1
    ind += 1

i = 0
while i < len(fullCSV):
    while i <= len(fullCSV)-1 and fullCSV[i][0] in failedSanCheck:
        fullCSV.pop(i)
    i += 1

# add the questionnaire answers to each row and delete them
ques_results = []
ind_2 = 0
while ind_2 < len(fullCSV):
    if ("questionnaire_h" in fullCSV[ind_2][2] or "quesionnaire_av" in fullCSV[ind_2][2]) and (not any(fullCSV[ind_2][5:8])):
        ques_results = fullCSV[ind_2][9:16]
        sub_id = fullCSV[ind_2][0]
        for i in range(len(fullCSV)-1):
            if fullCSV[i][0] == sub_id:
                fullCSV[i][9:16] = ques_results
        fullCSV.pop(ind_2)
    ind_2 += 1
#delete task_names
for row in fullCSV:
    del row[2]
del firstRow[2]
print(failedSanCheck)
print("failedSanCheck:", len(failedSanCheck))
print("ParticipantCount: ", counter, " percentage of failures: ", len(failedSanCheck)/counter)

#_______________________________________________________________________________________________
#_______________________________________________________________________________________________

with open(path+'OnlineAccept.csv', 'w+') as myfile:
    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
    wr.writerow(firstRow)
    for i in range(len(fullCSV)):
wr.writerow(fullCSV[i])
#+END_SRC

#+RESULTS:

* Load packages and set a seed

#+BEGIN_SRC R :session *R*
library(lme4)
library(parallel)
library(cowplot)
library(lsmeans)
library(plyr)
library(afex)
library(multcomp)
library(xtable)
library(tikzDevice)
library(rockchalk)
library(DHARMa)
library(fifer)
library(data.table)
set.seed(123)
#+END_SRC

#+RESULTS:

* Reading the data and change variable names and types

#+BEGIN_SRC R :session *R* :results none

# read the online_acceptibility data file
data <- read.csv("online_accept_data/OnlineAccept.csv")

setnames(data, "Subject_Id", "participant")
setnames(data, "PERSP", "perspective")
setnames(data, "DRIVER_TYPE", "motorist")
setnames(data, "first_vid", "first_anim")

levels(data$perspective) <- c("car", "observer", "pedestrian_fwd", "pedestrian_side")
levels(data$motorist) <- c("self-driving", "human")

# ensure correct data types
data$first_anim <- factor(data$first_anim)
data$scenario <- factor(data$scenario)
data$participant <- factor(data$participant)
data$response <- factor(data$response)
data$perspective <- factor(data$perspective)
data$motorist <- factor(data$motorist)


#+END_SRC

#+RESULTS:

* Determining variable types
- is it better to have ratio as a continuous variable or an ordered factor variable?
  - we will try both and compare via AIC and BIC and residuals
* Manipulation check
We first run a chi-squared test of indepdence check if our
manipulation of perspective induced greater identification with the
party.
#+BEGIN_SRC R :session *R* :results output :exports both
set.seed(123)

manip_check.sub <- subset(data, ((ratio == "1v1") & (scenario == "road")))

manip_check.sub$perspective <- combineLevels(manip_check.sub$
                                             perspective, levs = c("pedestrian_fwd", "pedestrian_side"), newLabel = c("pedestrian"))

manip_check.xtab <- xtabs(~perspective + identify, data = manip_check.sub)

manip_check.chisq <- chisq.test(manip_check.xtab, simulate.p.value = TRUE)

manip_check.chisq
#+END_SRC

#+RESULTS:
: The original levels car observer pedestrian_fwd pedestrian_side
: have been replaced by car observer pedestrian
:
: 	Pearson's Chi-squared test with simulated p-value (based on 2000
: 	replicates)
:
: data:  manip_check.xtab
: X-squared = 25.228, df = NA, p-value = 0.0004998

Follow up with post-hoc comparisons:
#+BEGIN_SRC R :session *R* :results output :exports both
manip_check.post <- chisq.post.hoc(manip_check.xtab)
manip_check.post
#+END_SRC

#+RESULTS:
: Adjusted p-values used the fdr method.
:                comparison  raw.p  adj.p
: 1        car vs. observer 0.1185 0.1185
: 2      car vs. pedestrian 0.0000 0.0000
: 3 observer vs. pedestrian 0.0044 0.0067

* Occupant-pedestrian dilemmas
** Create the subset
#+BEGIN_SRC R :session *R* :results none

# create subset for car-ped dilemmas
carped.sub <- subset(data, scenario == "carsac")
carped.sub$ratio_f <- ordered(carped.sub$ratio)
carped.sub$ratio_c <- scale(as.numeric(carped.sub$ratio))


carped.sub$perspective <- combineLevels(carped.sub$perspective,
                                        levs = c("pedestrian_fwd",
                                                 "pedestrian_side"),
                                        newLabel = c("pedestrian"))

#+END_SRC

** Create models and compare fit
*** with ratio as numeric
#+BEGIN_SRC R :session *R* :results none
set.seed(123)
carped_num.glmm <- glmer(response ~ ratio_c + perspective + motorist +
                             ratio_c:perspective +
                             ratio_c:motorist +
                             perspective:motorist +
                             ratio_c:perspective:motorist +
                             (1 | participant),
                         family = binomial,
                     data = carped.sub,
                     control = glmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))

#+END_SRC

**** check residuals
We use DHARMa to check that the residuals are normal.

#+BEGIN_SRC R :session *R* :results graphics :file carped_num_resid.png :exports both
set.seed(123)
carped_num_glmm.resid <- simulateResiduals(fittedModel = carped_num.glmm, n = 2000)
carped_num_glmm_resid.plot <- plotSimulatedResiduals(simulationOutput = carped_num_glmm.resid)
#+END_SRC


#+RESULTS:
[[file:carped_num_resid.png]]

*** with ratio as factor
#+BEGIN_SRC R :session *R* :results none
set.seed(123)
carped_fac.glmm <- glmer(response ~ ratio_f + perspective + motorist +
                             ratio_f:perspective +
                             ratio_f:motorist +
                             perspective:motorist +
                             ratio_f:perspective:motorist +
                             (1 | participant),
                         family = binomial,
                     data = carped.sub,
                     control = glmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))

#+END_SRC


**** check residuals
We use DHARMa to check that the residuals are normal.

#+BEGIN_SRC R :session *R* :results graphics :file carped_fac_resid.png :exports both
set.seed(123)
carped_fac_glmm.resid <- simulateResiduals(fittedModel = carped_fac.glmm, n = 2000)
carped_fac_glmm_resid.plot <- plotSimulatedResiduals(simulationOutput = carped_fac_glmm.resid)
#+END_SRC

#+RESULTS:
[[file:carped_fac_resid.png]]

*** compare the models
We compare the models on AIC, BIC and likelihood
#+BEGIN_SRC R :session *R* :results output :exports both
carped_cmp <- anova(carped_num.glmm, carped_fac.glmm)
print(carped_cmp)
#+END_SRC

#+RESULTS:
#+begin_example
Data: carped.sub
Models:
carped_num.glmm: response ~ ratio_c + perspective + motorist + ratio_c:perspective +
carped_num.glmm:     ratio_c:motorist + perspective:motorist + ratio_c:perspective:motorist +
carped_num.glmm:     (1 | participant)
carped_fac.glmm: response ~ ratio_f + perspective + motorist + ratio_f:perspective +
carped_fac.glmm:     ratio_f:motorist + perspective:motorist + ratio_f:perspective:motorist +
carped_fac.glmm:     (1 | participant)
                Df    AIC    BIC  logLik deviance  Chisq Chi Df Pr(>Chisq)
carped_num.glmm 13 459.45 513.71 -216.72   433.45
carped_fac.glmm 25 473.10 577.44 -211.55   423.10 10.352     12     0.5851
#+end_example

** Create ANOVA table using parametric bootstrapping
We use =afex= to create an ANOVA table for the chosen model with
parametric bootstrapping
#+BEGIN_SRC R :session *R* :results none :exports both
set.seed(123)
(nc <- detectCores())
cl <- makeCluster(rep("localhost", nc))


carped_glmm <- mixed(response ~ ratio_c + perspective + motorist +
                         ratio_c:perspective +
                         ratio_c:motorist +
                         perspective:motorist +
                         ratio_c:perspective:motorist +
                         (1 | participant),
                     method = "PB",
                     family = binomial, data = carped.sub,
                     args_test = list(nsim = 100, cl = cl), cl = cl,
                     control = glmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
#+END_SRC

ANOVA table:
#+BEGIN_SRC R :session *R* :results output :exports both
carped_glmm
#+END_SRC
** Follow-up tests
We now use =lsmeans= to follow-up the significant interaction effects
#+BEGIN_SRC R :session *R* :results output :exports both

#+END_SRC
** Plot
*** Create predicted dataset
#+BEGIN_SRC R :session *R* :results none

label_names <- c("self-driving" = "Self-driving car",
                 "human" = "Human driver",
                 "sidewalk" = "Sidewalk",
                 "road" = "Road",
                 "pedestrian" = "Pedestrian",
                 "car" = "Car occupant",
                 "observer" = "Bird's-eye view")

# create predicted data for plotting
ratio <- rep(c(1, 2, 3, 4), 6)
perspective <- rep(c("car", "observer", "pedestrian", "car", "observer", "pedestrian"), each = 4)
motorist <- rep(c("self-driving", "human"), each = 12)

carped_plot.data <- data.frame(ratio, perspective, motorist)
carped_plot.data$ratio_c <- scale(carped_plot.data$ratio)

carped_plot.data$response <- predict(carped_glmm$full_model,
                                     newdata = carped_plot.data,
                                     re.form = NA,
                                     type = "response")

#+END_SRC

*** Plot predicted data
#+BEGIN_SRC R :session *R* :exports both :results graphics :file carped_plot.png
carped.plot <- ggplot(carped_plot.data,
                      aes(ratio,
                          as.numeric(response),
                          color = perspective)) +
    geom_line(aes(group = perspective)) +
    facet_grid(.~ motorist, labeller = as_labeller(label_names)) +
    theme_cowplot(font_size = 10) + geom_point() +
    scale_x_continuous(name = "Lives-risked ratio", limits = c(1, 4)) +
    scale_y_continuous(name = "P(Choosing swerve as more acceptable)",
                       limits = c(0, 1)) + coord_equal(ratio = 3) +
    scale_color_manual(name = "Perspective",
                       labels = c("Car occupant",
                                  "Bird's-eye view",
                                  "Pedestrian"),
                       values = c("red3", "skyblue", "orange1" ))

carped.plot
#+END_SRC

#+RESULTS:
[[file:carped_plot.png]]
