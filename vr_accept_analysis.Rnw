\documentclass{scrartcl}
\title{VR study script}
\subtitle{}
\date{\today}

\usepackage{dcolumn}
\usepackage{booktabs}

\begin{document}
\pagenumbering{gobble}
\maketitle
\newpage
\pagenumbering{arabic}

\section{R setup}
\label{sec:r-setup}

<<version>>=
version
@

The first thing we do is set a random seed for R. This ensures we can
reproduce any analysis that has a random component.

<<set-seed>>=
our_seed <- 123
set.seed(our_seed)
@

We'll use `\Sexpr{our_seed}' as our seed. Next we need to load the
libraries.

<<load-libraries>>=
require(knitr)
require(lme4)
require(afex)
library(memisc)
require(cowplot)
require(DHARMa)
require(xtable)
require(rockchalk)
require(tikzDevice)
require(parallel)
require(fifer)
require(multcomp)
require(vcdExtra)
require(catspec)

@

\section{Reading the files}
\label{sec:read-data}
We now read in the data files.

<<read-data>>=
child.data <- read.csv("vr_data/childrenCSV.csv")
carsac.data <- read.csv("vr_data/selfSacCSV.csv")
sidewalk.data <- read.csv("vr_data/sidewalkCSV.csv")

theme_set(theme_cowplot(font_size=11.5))
@

Some of the variables need cleaning, so we rename them.
<<rename-variables>>=

# rename gender variable
colnames(child.data)[2] <- "gender"
# rename driver variable
colnames(child.data)[3] <- "motorist"
# rename levels for driver
child.data$motorist <- factor(child.data$motorist,
                            levels = c("False", "True"),
                            labels = c("human", "self-driving"))
# set participant to factor
child.data$participant.ID <- factor(child.data$participant.ID)
# set confidence to numeric
child.data$confidence <- as.numeric(child.data$confidence)
# rename levels for gender
child.data$gender <- factor(child.data$gender,
                            levels = c("False", "True"),
                            labels = c("female", "male"))
# remove sanity check and perception check failures
child.sub <- subset(child.data, child.data$passedSanCheck == "True" &
                                child.data$SecondSanCheck == "True")

child.sub$participant.ID <- droplevels(child.sub$participant.ID)



# set variables to correct type

child.sub$opinAV <- ordered(child.sub$opinAV,
                            levels = c("Sehr negativ",
                                       "Negativ",
                                       "Neutral",
                                       "Positiv",
                                       "Sehr positiv"))

child.sub$education <- ordered(child.sub$education,
                               levels = c("keinen Hocschulabschluss",
                                          "Hochschulabschluss (Bachelor, Vordiplom,etc.)",
                                          "Hochschulabschluss (Master, Diplom, oder höher)"))



child.sub$drivExperience <- ordered(child.sub$drivExperience,
                                    levels = c("Ich fahre nicht Auto",
                                               "1-5 Jahre",
                                               "5-10",
                                               "10+"))



# reorder perspective levels
child.sub$perspective <- factor(child.sub$perspective,
                                levels = c("Observer",
                                           "Passenger",
                                           "PedSmall",
                                           "PedLarge"),
                                labels = c("Bystander",
                                           "Passenger",
                                           "PedSmall",
                                           "PedLarge"))

child.sub$age_c <- scale(child.sub$age)

child.sub$perceivedIden <- factor(child.sub$perceivedIden,
                                   levels = c("Beobachter",
                                              "Mitfahrer",
                                              "Fußgänger"),
                                   labels = c("Bystander",
                                              "Passenger",
                                              "Pedestrian"))


                                        # carsac

# rename gender variable
colnames(carsac.data)[2] <- "gender"
# rename driver variable
colnames(carsac.data)[3] <- "motorist"
# rename levels for driver
carsac.data$motorist <- factor(carsac.data$motorist,
                            levels = c("False", "True"),
                            labels = c("human", "self-driving"))
carsac.data$participant.ID <- factor(carsac.data$participant.ID)
# rename levels for gender
carsac.data$gender <- factor(carsac.data$gender,
                            levels = c("False", "True"),
                            labels = c("female", "male"))

# set confidence to numeric
carsac.data$confidence <- as.numeric(carsac.data$confidence)

carsac.sub <- subset(carsac.data, carsac.data$passedSanCheck == "True" &
                                  carsac.data$SecondSanCheck == "True")

carsac.sub$participant.ID <- droplevels(carsac.sub$participant.ID)

carsac.sub$age_c <- scale(carsac.sub$age)

carsac.sub$perceivedIden <- factor(carsac.sub$perceivedIden,
                                   levels = c("Beobachter",
                                              "Mitfahrer",
                                              "Fußgänger"),
                                   labels = c("Bystander",
                                              "Passenger",
                                              "Pedestrian"))

carsac.sub$perspective <- factor(carsac.sub$perspective,
                                 levels = c("Observer",
                                            "Passenger",
                                            "PedSmall",
                                            "PedLarge"),
                                 labels = c("Bystander",
                                            "Passenger",
                                            "PedSmall",
                                            "PedLarge"))

carsac.sub$perspective <- combineLevels(
    carsac.sub$perspective,
    levs=c("PedLarge", "PedSmall"),
    newLabel = "Pedestrian")


carsac.sub$opinAV <- ordered(carsac.sub$opinAV,
                            levels = c("Sehr negativ",
                                       "Negativ",
                                       "Neutral",
                                       "Positiv",
                                       "Sehr positiv"))

carsac.sub$education <- ordered(carsac.sub$education,
                               levels = c("keinen Hocschulabschluss",
                                          "Hochschulabschluss (Bachelor, Vordiplom,etc.)",
                                          "Hochschulabschluss (Master, Diplom, oder höher)"))



carsac.sub$drivExperience <- ordered(carsac.sub$drivExperience,
                                    levels = c("Ich fahre nicht Auto",
                                               "1-5 Jahre",
                                               "5-10",
                                               "10+"))


# sidewalk
# rename gender variable
colnames(sidewalk.data)[2] <- "gender"
# rename driver variable
colnames(sidewalk.data)[3] <- "motorist"
# set participant to factor
sidewalk.data$participant.ID <- factor(sidewalk.data$participant.ID)
# rename levels for driver
sidewalk.data$motorist <- factor(sidewalk.data$motorist,
                            levels = c("False", "True"),
                            labels = c("human", "self-driving"))
# rename levels for gender
sidewalk.data$gender <- factor(sidewalk.data$gender,
                            levels = c("False", "True"),
                            labels = c("female", "male"))
# set confidence to numeric
sidewalk.data$confidence <- as.numeric(sidewalk.data$confidence)
                                        # sanity check
sidewalk.sub <- subset(sidewalk.data,
                       sidewalk.data$passedSanCheck == "True" &
                       SecondSanCheck == "True")

sidewalk.sub$participant.ID <- droplevels(sidewalk.sub$participant.ID)


sidewalk.sub$perspective <- factor(sidewalk.sub$perspective,
                                      levels = c("Observer",
                                                 "Passenger",
                                                 "PedSmall",
                                                 "PedLarge"),
                                      labels = c("Bystander",
                                                 "Passenger",
                                                 "PedSmall",
                                                 "PedLarge"))

sidewalk.sub$age_c <- scale(sidewalk.sub$age)

sidewalk.sub$perceivedIden <- factor(sidewalk.sub$perceivedIden,
                                   levels = c("Beobachter",
                                              "Mitfahrer",
                                              "Fußgänger"),
                                   labels = c("Bystander",
                                              "Passenger",
                                              "Pedestrian"))


sidewalk.sub$opinAV <- ordered(sidewalk.sub$opinAV,
                            levels = c("Sehr negativ",
                                       "Negativ",
                                       "Neutral",
                                       "Positiv",
                                       "Sehr positiv"))

sidewalk.sub$education <- ordered(sidewalk.sub$education,
                               levels = c("keinen Hocschulabschluss",
                                          "Hochschulabschluss (Bachelor, Vordiplom,etc.)",
                                          "Hochschulabschluss (Master, Diplom, oder höher)"))



sidewalk.sub$drivExperience <- ordered(sidewalk.sub$drivExperience,
                                    levels = c("Ich fahre nicht Auto",
                                               "1-5 Jahre",
                                               "5-10",
                                               "10+"))


@

\section{Manipulation check}
\label{sec:manip-check}

We use a \(\chi^2\) goodness of fit test to see if perspective
affects identification.  First we create a subset of only one trial,
and collapse the two pedestrian perspectives.

<<manip-check-sub>>=
manip_check.sub <- subset(child.sub, trial == "largeGroups")
manip_check.sub$perspective <- combineLevels(manip_check.sub$perspective,
                                             levs = c("PedLarge",
                                                      "PedSmall"),
                                             newLabel = c("Pedestrian"))

@

Next we create a contingency table.

<<manip-check-table, results = 'asis'>>=
manip_check.xtab <- xtabs(~perspective + perceivedIden,
                          data = manip_check.sub)
toLatex(ftable(manip_check.xtab))
@

Then we compute the test statistic.

<<manip-check-chisq>>=
manip_check.chisq <- chisq.test(manip_check.xtab,
                                simulate.p.value = FALSE)
manip_check.chisq
@

If the test statistic is significant, we perform follow-up comparisons.

<<manip-check-posthoc,results='asis'>>=
alpha <- 0.05
if (manip_check.chisq$p.value <= alpha){
    manip_check.post <- chisq.post.hoc(manip_check.xtab)
    }
print(xtable(manip_check.post))
@

\section{Child vs adult dilemmas}
\label{sec:child}

\subsection{Visualising the raw responses}
\label{sec:child-raw}

First we look at the raw proportions of the responses.

<<child-plot>>=

child.sub$confidence_signed <- ifelse(
    child.sub$decision == "hitChildren",
    -child.sub$confidence, child.sub$confidence)

child_means <- do.call(data.frame, aggregate(
    confidence_signed ~
        motorist + perspective + decision,
    data = child.sub, FUN=function(x) c(mean = mean(x), sd = sd(x))))

child_means$decision <- paste("x_", child_means$decision, sep="")

child.ctab <- ctab(child.sub$motorist, child.sub$perspective,
                      child.sub$decision, percentages=TRUE, type = "row")

child.cont <- as.data.frame(child.ctab$ctab)
colnames(child.cont)[1] <- "motorist"
colnames(child.cont)[2] <- "perspective"
colnames(child.cont)[3] <- "decision"

child.cont$confidence_signed <- child_means$confidence_signed.mean

child.cont$confidence_sd <- child_means$confidence_signed.sd
child.cont$decision2 <- child_means$decision


child.cont$Freq <- ifelse(child.cont$decision == "hitChildren",
                             -child.cont$Freq, child.cont$Freq)


motorist_names <- c("self-driving" = "Self-driving car",
                    "human" = "Human driver")


child_raw.plot <- ggplot(child.cont, aes(x = perspective,
                                         group = decision:perspective)) +
    geom_bar(stat = "identity", aes(y = Freq, fill = decision), colour = "black") +
    ylab("Confidence") +
     geom_errorbar(aes(ymin = confidence_signed - confidence_sd,
                       ymax = confidence_signed + confidence_sd,
                       width = 0.1),
               data = child.cont) +
    scale_x_discrete(name = "Perspective",
                     limits = rev(levels(child.cont$perspective)),
                     labels = c("Pedestrian\nwith adults",
                                "Pedestrian\nwith children",
                                "Passenger", "Bystander")) +
    scale_y_continuous(limits = c(-110,110),
                       sec.axis = sec_axis(
                           ~., name = "Relative frequency (%)",
                           labels = c("100", "50", "0", "50", "100")),
                       labels = c(100, 50, 0, 50, 100)) +
    geom_point(stat = "identity", aes(y = confidence_signed,
                                      group = decision:perspective,
                                      shape = decision),
               size = 2.5) +
#    geom_hline(yintercept = 0, linetype = "dashed") +
    scale_shape_manual(
        values = c(22, 15),
        name = "Mean (\u00B1SD) confidence in decision",
        labels = c("\nEndanger child pedestrians\n(fewer lives)\n",
                   "\nEndanger adult pedestrians\n(more lives)\n"),
        limits = rev(levels(child.cont$decision))) +
    scale_fill_manual(
        values = c("#67a9cf", "#ef8a62", "white", "black"),
        name = "Relative frequency of decision",
        labels = c("\nEndanger child pedestrians\n(fewer lives)\n",
                   "\nEndanger adult pedestrians\n(more lives)\n"),
        limits = c("hitChildren", "hitAdults",
                   "x_hitChildren", "x_hitAdults")) +
    geom_point(stat = "identity", aes(y = confidence_signed,
                                      group = decision:perspective,
                                      fill = decision2, shape = decision),
               size = 3, show.legend = FALSE) +
    facet_grid(motorist ~ ., labeller = as_labeller(motorist_names)) +
    guides(fill = guide_legend(order = 1),
           shape = guide_legend(order = 2)) +
    coord_flip() + theme(legend.position = "bottom",
                         legend.direction = "vertical") +
    theme(aspect.ratio = 1/3)

child_raw.plot

@

\subsection{The model}
\label{sec:child-model}

We run a logit mixed model to predict the decision of the participants.

<<child-adult-glmm,results='asis'>>=

(nc <- detectCores())
cl <- makeCluster(rep("localhost", nc))

child_glmm_base<- mixed(decision ~ perspective * motorist +
                        trial +
                        (1 | participant.ID),
                    method = "LRT", # change to PB for final
                    family = "binomial", data = child.sub,
                    args_test = list(nsim = 1000, cl = cl), cl = cl,
                    control = glmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))


child_glmm <- mixed(decision ~ perspective + motorist +
                        perspective:motorist +
                        trial + gender + age_c + opinAV +
                        education +  drivExperience + visImpairment +
                        perceivedIden +
                        (1 | participant.ID),
                    method = "LRT", # change to PB for final
                    family = "binomial", data = child.sub,
                    args_test = list(nsim = 1000, cl = cl), cl = cl,
                    control = glmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
stopCluster(cl)

child_glmm_anova <- child_glmm$anova_table
print(xtable(child_glmm_anova))
@

We then check the residuals of the model.

<<check-resid>>=
child_glmm.resid <- simulateResiduals(
    fittedModel = child_glmm$full_model,
    n = 2000)

child_glmm_resid.plot <- plotSimulatedResiduals(
    simulationOutput = child_glmm.resid)

testUniformity(child_glmm.resid)

@

If they look okay, we follow up any significant differences.


\subsection{Follow-up comparisons}
\label{sec:child-followup}

If we find an interaction between perspective and motorist-type we
should follow that up with comparisons of perspective within each
level of motorist.

<<child-int,results='asis'>>=
emm_child_i <- emmeans(child_glmm, ~ perspective | motorist,
                       type = "response",
                       contr = "pairwise")
xtable(emm_child_i$contrasts)
@

If we find no interaction but a significant main effect of
perspective, we need to do follow-up multiple comparisons to find out
where the difference is.

<<child-persp,results='asis'>>=
emm_child_persp <- emmeans(child_glmm, pairwise ~ perspective,
                           type = 'response')
xtable(emm_child_persp$contrasts)
@

If we find a main effect of motorist-type, we need to calculate the
marginal means to see the effect.

<<child-motorist,results='asis'>>=
emm_child_motorist <- emmeans(child_glmm, pairwise ~ motorist,
                              type = 'response')
xtable(emm_child_motorist$contrasts)
@


\subsubsection{Confidence}

<<child-conf-model,results='asis'>>=
(nc <- detectCores())
cl <- makeCluster(rep("localhost", nc))
child_conf_lmm<- mixed(confidence ~ perspective * motorist * decision +
                        trial + gender +
                        opinAV + education + visImpairment +
                        drivExperience + perceivedIden + age_c +
                        (1 | participant.ID),
                    method = "S", # change to PB for final
                    data = child.sub,
                    args_test = list(nsim = 1000, cl = cl), cl = cl)

stopCluster(cl)

xtable(child_conf_lmm$anova_table)

@

<<child-conf-resid>>=
child_conf_lmm.resid <- simulateResiduals(
    fittedModel = child_conf_lmm$full_model,
    n = 2000)

child_conf_lmm.plot <- plotSimulatedResiduals(
    simulationOutput = child_conf_lmm.resid)
testUniformity(child_conf_lmm.resid)

@
<<child-conf-followup,results='asis'>>=

child_conf_i3 <- emmeans(child_conf_lmm,
                         pairwise ~ perspective | motorist + decision)
xtable(child_conf_i3$contrasts)

child_conf_moto_persp_i <- emmeans(child_conf_lmm,
                                   pairwise ~ perspective | motorist)
xtable(child_conf_moto_persp_i$contrasts)

child_conf_lmm_moto_dec_i <- emmeans(child_conf_lmm,
                                     pairwise ~ motorist | decision)
xtable(child_conf_lmm_moto_dec_i$contrasts)

child_conf_lmm_persp_dec_i <- emmeans(child_conf_lmm,
                                      pairwise ~ perspective | decision)
xtable(child_conf_lmm_persp_dec_i$contrasts)

child_conf_lmm_decision <- emmeans(child_conf_lmm,
                                   pairwise ~ decision)
xtable(child_conf_lmm_decision$contrasts)

child_conf_lmm_motorist <- emmeans(child_conf_lmm,
                                   pairwise ~ motorist)
xtable(child_conf_lmm_motorist$contrasts)

child_conf_lmm_persp <- emmeans(child_conf_lmm,
                                pairwise ~ perspective)
xtable(child_conf_lmm_persp$contrasts)
@


\section{Car occupants vs pedestrians dilemma}
\label{sec:carsac}

We collapse both pedestrian perspectives for this dilemma.
<<carsac-clean>>=

@

\subsection{Plotting the raw responses}
\label{sec:carsac-plot}
<<carsac-plot>>=

### mountain trial

carsac.sub <- subset(carsac.sub, carsac.sub$trial == "mountain")

carsac.sub$confidence_signed <- ifelse(
    carsac.sub$decision == "hitPedestrians",
    -carsac.sub$confidence,
    carsac.sub$confidence)

carsac_means <- do.call(data.frame, aggregate(
    confidence_signed ~
        motorist + perspective + decision,
    data = carsac.sub, FUN=function(x) c(mean = mean(x), sd = sd(x))))

carsac_means$confidence_signed.mean <- as.numeric(carsac_means$confidence_signed.mean)
carsac_means$confidence_signed.sd <- as.numeric(carsac_means$confidence_signed.sd)

carsac_means$decision <- paste("x_", carsac_means$decision, sep="")

carsac.ctab <- ctab(carsac.sub$motorist, carsac.sub$perspective,
                    carsac.sub$decision, percentages=TRUE, type = "row")

motorist_names <- c("self-driving" = "Self-driving car",
                    "human" = "Human driver")

carsac.cont <- as.data.frame(carsac.ctab$ctab)
colnames(carsac.cont)[1] <- "motorist"
colnames(carsac.cont)[2] <- "perspective"
colnames(carsac.cont)[3] <- "decision"

carsac.cont$confidence_signed <- carsac_means$confidence_signed.mean

carsac.cont$confidence_sd <- carsac_means$confidence_signed.sd
carsac.cont$decision2 <- carsac_means$decision

carsac.cont$Freq <- ifelse(
    carsac.cont$decision == "hitPedestrians",
    -carsac.cont$Freq, carsac.cont$Freq)

carsac.sub$confidence_signed <- ifelse(
    carsac.sub$decision == "hitPedestrians",
    -carsac.sub$confidence, carsac.sub$confidence)

carsac_mountain_raw.plot <- ggplot(carsac.cont, aes(x = perspective,
                                         group = decision:perspective)) +
    geom_bar(stat = "identity", aes(y = Freq, fill = decision), colour = "black") +
    ylab("Confidence") +
     geom_errorbar(aes(ymin = confidence_signed - confidence_sd,
                       ymax = confidence_signed + confidence_sd,
                       width = 0.1),
               data = carsac.cont) +
    scale_x_discrete(name = "Perspective",
                     limits = rev(levels(carsac.cont$perspective)),
                     labels = c("Pedestrian",
                                "Passenger",
                                "Bystander")) +
        scale_y_continuous(limits = c(-112,112),
                       sec.axis = sec_axis(
                           ~., name = "Relative frequency (%)",
                           labels = c("100", "50", "0", "50", "100")),
                       labels = c(100, 50, 0, 50, 100)) +
        geom_point(stat = "identity", aes(y = confidence_signed,
                                      group = decision:perspective,
                                      shape = decision2), size = 2.5) +
#    geom_hline(yintercept = 0, linetype = "dashed") +
    scale_shape_manual(
        values = c(22, 15),
        name = "Mean (\u00B1SD) confidence in decision",
        labels = c("\nEndanger pedestrians\n",
                   "\nEndanger car occupants\n")) +
    scale_fill_manual(
        values = c("#67a9cf", "#ef8a62", "white", "black"),
        name = "Relative frequency of decision",
        labels = c("\nEndanger pedestrians\n",
                   "\nEndanger car occupants\n")) +
            geom_point(stat = "identity",
                       aes(y = confidence_signed,
                           group = decision:perspective,
                           fill = decision2, shape = decision2),
                       size = 3, show.legend = FALSE) +
    facet_grid(motorist ~ ., labeller = as_labeller(motorist_names)) +
    guides(fill = guide_legend(order = 1),
           shape = guide_legend(order = 2)) +
    coord_flip() + theme(legend.position = "bottom",
                         legend.direction = "vertical") +
    theme(aspect.ratio = 1/3)


carsac_mountain_raw.plot


### city trial

carsac.sub <- subset(carsac.sub, carsac.sub$trial == "cityR")

carsac.sub$confidence_signed <- ifelse(
    carsac.sub$decision == "hitPedestrians",
    -carsac.sub$confidence,
    carsac.sub$confidence)

carsac_means <- do.call(data.frame, aggregate(
    confidence_signed ~
        motorist + perspective + decision,
    data = carsac.sub, FUN=function(x) c(mean = mean(x), sd = sd(x))))


insertRow <- function(existingDF, newrow, r) {
  existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
  existingDF[r,] <- newrow
  existingDF
}

carsac_means <- insertRow(carsac_means, c("human", "Bystander", "hitPedestrians", c(-1000, 10)), 1)

carsac_means$confidence_signed.mean <- as.numeric(carsac_means$confidence_signed.mean)
carsac_means$confidence_signed.sd <- as.numeric(carsac_means$confidence_signed.sd)

carsac_means$decision <- paste("x_", carsac_means$decision, sep="")

carsac.ctab <- ctab(carsac.sub$motorist, carsac.sub$perspective,
                    carsac.sub$decision, percentages=TRUE, type = "row")

motorist_names <- c("self-driving" = "Self-driving car",
                    "human" = "Human driver")

carsac.cont <- as.data.frame(carsac.ctab$ctab)
colnames(carsac.cont)[1] <- "motorist"
colnames(carsac.cont)[2] <- "perspective"
colnames(carsac.cont)[3] <- "decision"

carsac.cont$confidence_signed <- carsac_means$confidence_signed.mean

carsac.cont$confidence_sd <- carsac_means$confidence_signed.sd
carsac.cont$decision2 <- carsac_means$decision

carsac.cont$Freq <- ifelse(
    carsac.cont$decision == "hitPedestrians",
    -carsac.cont$Freq, carsac.cont$Freq)

carsac.sub$confidence_signed <- ifelse(
    carsac.sub$decision == "hitPedestrians",
    -carsac.sub$confidence, carsac.sub$confidence)

carsac_city_raw.plot <- ggplot(carsac.cont, aes(x = perspective,
                                         group = decision:perspective)) +
    geom_bar(stat = "identity", aes(y = Freq, fill = decision), colour = "black", width = 0.9) +
    ylab("Confidence") +
     geom_errorbar(aes(ymin = confidence_signed - confidence_sd,
                       ymax = confidence_signed + confidence_sd,
                       width = 0.1),
               data = carsac.cont) +
    scale_x_discrete(name = "Perspective",
                     limits = rev(levels(carsac.cont$perspective)),
                     labels = c("Pedestrian",
                                "Passenger",
                                "Bystander")) +
        scale_y_continuous(limits = c(-112,112),
                       sec.axis = sec_axis(
                           ~., name = "Relative frequency (%)",
                           labels = c("100", "50", "0", "50", "100")),
                       labels = c(100, 50, 0, 50, 100)) +
        geom_point(stat = "identity", aes(y = confidence_signed,
                                      group = decision:perspective,
                                      shape = decision2), size = 2.5) +
#    geom_hline(yintercept = 0, linetype = "dashed") +
    scale_shape_manual(
        values = c(22, 15),
        name = "Mean (\u00B1SD) confidence in decision",
        labels = c("\nEndanger pedestrians\n",
                   "\nEndanger car occupants\n")) +
    scale_fill_manual(
        values = c("#67a9cf", "#ef8a62", "white", "black"),
        name = "Relative frequency of decision",
        labels = c("\nEndanger pedestrians\n",
                   "\nEndanger car occupants\n")) +
            geom_point(stat = "identity",
                       aes(y = confidence_signed,
                           group = decision:perspective,
                           fill = decision2, shape = decision2),
                       size = 3, show.legend = FALSE) +
    facet_grid(motorist ~ ., labeller = as_labeller(motorist_names)) +
    guides(fill = guide_legend(order = 1),
           shape = guide_legend(order = 2)) +
    coord_flip() + theme(legend.position = "bottom",
                         legend.direction = "vertical") +
    theme(aspect.ratio = 1/3)


carsac_city_raw.plot

@

\subsection{The models}
\label{sec:carped-glmm}
\subsubsection{Decision model}
<<carped-glmm,results='asis'>>=
(nc <- detectCores())
cl <- makeCluster(rep("localhost", nc))

carsac_glmm <- mixed(decision ~ perspective * motorist +
                        trial + gender +
                        opinAV + education + visImpairment +
                        drivExperience +  perceivedIden + age_c +
                        (1 | participant.ID),
                    method = "LRT", # change to PB for final
                    family = "binomial", data = carsac.sub,
                    args_test = list(nsim = 1000, cl = cl), cl = cl,
                    control = glmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))

stopCluster(cl)
xtable(carsac_glmm$anova_table)
@

Then we check the residuals.

<<carped-resid>>=
carsac_glmm.resid <- simulateResiduals(
    fittedModel = carsac_glmm$full_model, n = 2000)
carsac_glmm_resid.plot <- plotSimulatedResiduals(
    simulationOutput = carsac_glmm.resid)

testUniformity(carsac_glmm.resid)
@

\subsection{Follow-up analyses}
\label{sec:carped-dec-followup}

If we find an interaction between perspective and motorist-type we
should follow that up with comparisons of perspective within each
level of motorist.

<<carsac-int,results='asis'>>=
emm_carsac_i <- emmeans(carsac_glmm, pairwise ~ perspective | motorist,
                        type = 'response')
xtable(emm_carsac_i$contrasts)
@

If we find no interaction but a significant main effect of
perspective, we need to do follow-up multiple comparisons to find out
where the difference is.

<<carsac-persp,results='asis'>>=
emm_carsac_persp <- emmeans(carsac_glmm, pairwise ~ perspective,
                            type = 'response')
xtable(emm_carsac_persp$contrasts)
@

If we find a main effect of motorist-type, we need to calculate the
marginal means to see the effect.

<<carsac-motorist,results='asis'>>=
emm_carsac_motorist <- emmeans(carsac_glmm, pairwise ~ motorist,
                               type = 'response')
xtable(emm_carsac_motorist$contrasts)
@
\subsubsection{Confidence model}
<<carsac-conf-model,results='asis'>>=
(nc <- detectCores())
cl <- makeCluster(rep("localhost", nc))
carsac_conf_lmm<- mixed(confidence ~ perspective * motorist * decision +
                        trial + gender +
                        opinAV + education +
                        drivExperience + perceivedIden + age_c +
                        (1 | participant.ID),
                    method = "KR", # change to PB for final
                    data = carsac.sub,
                    args_test = list(nsim = 1000, cl = cl), cl = cl)

stopCluster(cl)

xtable(carsac_conf_lmm$anova_table)
@

<<carsac-conf-resid>>=
carsac_lmm.resid <- simulateResiduals(
    carsac_conf_lmm$full_model, n = 2000)
carsac_lmm_resid.plot <- plotSimulatedResiduals(
    carsac_lmm.resid)

testUniformity(carsac_lmm.resid)
@

Follow-up significant 3-way interaction

<<carsac-conf-followup,results='asis'>>=

carsac_conf_i3 <- emmeans(carsac_conf_lmm,
                          pairwise ~ perspective | motorist + decision)
xtable(carsac_conf_i3$contrasts)

carsac_conf_moto_persp_i <- emmeans(carsac_conf_lmm,
                                    pairwise ~ perspective | motorist)
xtable(carsac_conf_moto_persp_i$contrasts)

carsac_conf_lmm_moto_dec_i <- emmeans(carsac_conf_lmm,
                                      pairwise ~ motorist | decision)
xtable(carsac_conf_lmm_moto_dec_i$contrasts)

carsac_conf_lmm_persp_dec_i <- emmeans(carsac_conf_lmm,
                                       pairwise ~ perspective | decision)
xtable(carsac_conf_lmm_persp_dec_i$contrasts)

carsac_conf_lmm_decision <- emmeans(carsac_conf_lmm,
                                    pairwise ~ decision)
xtable(carsac_conf_lmm_decision$contrasts)

carsac_conf_lmm_motorist <- emmeans(carsac_conf_lmm,
                                    pairwise ~ motorist)
xtable(carsac_conf_lmm_motorist$contrasts)

carsac_conf_lmm_persp <- emmeans(carsac_conf_lmm,
                                 pairwise ~ perspective)
xtable(carsac_conf_lmm_persp$contrasts)
@

\section{Sidewalk vs road dilemma}
\label{sec:sidewalk}

\subsection{Plot the raw responses}
\label{sec:sidewalk-plot}



<<sidewalk-plot>>=


sidewalk.sub$confidence_signed <- ifelse(
    sidewalk.sub$decision == "hitSidewalk",
    -sidewalk.sub$confidence, sidewalk.sub$confidence)

sidewalk_means <- do.call(data.frame, aggregate(
    confidence_signed ~
        motorist + perspective + decision,
    data = sidewalk.sub, FUN=function(x) c(mean = mean(x), sd = sd(x))))

sidewalk_means$decision <- paste("x_", sidewalk_means$decision, sep="")

sidewalk.ctab <- ctab(
    sidewalk.sub$motorist, sidewalk.sub$perspective,
    sidewalk.sub$decision, percentages=TRUE, type = "row")

sidewalk.cont <- as.data.frame(sidewalk.ctab$ctab)
colnames(sidewalk.cont)[1] <- "motorist"
colnames(sidewalk.cont)[2] <- "perspective"
colnames(sidewalk.cont)[3] <- "decision"

sidewalk.cont$confidence_signed <- sidewalk_means$confidence_signed.mean

sidewalk.cont$confidence_sd <- sidewalk_means$confidence_signed.sd
sidewalk.cont$decision2 <- sidewalk_means$decision

sidewalk.cont$Freq <- ifelse(sidewalk.cont$decision == "hitSidewalk",
                             -sidewalk.cont$Freq, sidewalk.cont$Freq)

sidewalk_raw.plot <- ggplot(sidewalk.cont, aes(x = perspective,
                                         group = decision:perspective)) +
    geom_bar(stat = "identity", aes(y = Freq, fill = decision), colour = "black", width = 0.9) +
    ylab("Confidence") +
     geom_errorbar(aes(ymin = confidence_signed - confidence_sd,
                       ymax = confidence_signed + confidence_sd,
                       width = 0.1),
                   data = sidewalk.cont) +
    scale_x_discrete(name = "Perspective",
                     limits = rev(levels(sidewalk.cont$perspective)),
                     labels = c("Pedestrian\non road",
                                "Pedestrian\non sidewalk",
                                "Passenger", "Bystander")) +
        scale_y_continuous(limits = c(-112,112),
                       sec.axis = sec_axis(
                           ~., name = "Relative frequency (%)",
                           labels = c("100", "50", "0", "50", "100")),
                       labels = c(100, 50, 0, 50, 100)) +
    geom_point(stat = "identity", aes(y = confidence_signed,
                                      group = decision:perspective,
                                      shape = decision2), size = 2.5) +
#    geom_hline(yintercept = 0, linetype = "dashed") +
    scale_shape_manual(
        values = c(22, 15),
        name = "Mean (\u00B1SD) confidence in decision",
        labels = c("\nEndanger pedestrians on sidewalk\n(fewer lives)\n",
                   "\nEndanger pedestrians on road\n(more lives)\n")) +
    scale_fill_manual(
        values = c("#67a9cf", "#ef8a62", "white", "black"),
        name = "Relative frequency of decision",
        labels = c("\nEndanger pedestrians on sidewalk\n(fewer lives)\n",
                   "\nEndanger pedestrians on road\n(more lives)\n")) +
    geom_point(stat = "identity",
               aes(y = confidence_signed,
                   group = decision:perspective,
                   fill = decision2, shape = decision2),
               size = 3, show.legend = FALSE) +
    facet_grid(motorist ~ ., labeller = as_labeller(motorist_names)) +
    guides(fill = guide_legend(order = 1),
           shape = guide_legend(order = 2)) +
    coord_flip() + theme(legend.position = "bottom",
                         legend.direction = "vertical")

sidewalk_raw.plot
@

\label{sec:sidewalk-glmm}
<<sidewalk-glmm,results='asis'>>=


(nc <- detectCores())
cl <- makeCluster(rep("localhost", nc))

sidewalk_glmm <- mixed(decision ~ perspective + motorist +
                        perspective:motorist +
                        trial + gender + age_c + opinAV +
                        education +  drivExperience + visImpairment +
                        perceivedIden +
                        (1 | participant.ID),
                    method = "LRT", # change to PB for final
                    family = "binomial", data = sidewalk.sub,
                    args_test = list(nsim = 1000, cl = cl), cl = cl,
                    control = glmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))

stopCluster(cl)
xtable(sidewalk_glmm$anova_table)
@

Then we check the residuals.

<<sidewalk-resid>>=
sidewalk_glmm.resid <- simulateResiduals(
    fittedModel = sidewalk_glmm$full_model, n = 2000)
sidewalk_glmm_resid.plot <- plotSimulatedResiduals(
    simulationOutput = sidewalk_glmm.resid)

testUniformity(sidewalk_glmm.resid)
@

\subsection{Follow-up analyses}
\label{sec:sidewalk-followup}

If we find an interaction between perspective and motorist-type we
should follow that up with comparisons of perspective within each
level of motorist.

<<sidewalk-int,results='asis'>>=
emm_sidewalk_i <- emmeans(sidewalk_glmm, pairwise ~ perspective | motorist,
                          type = 'response')
xtable(emm_sidewalk_i$contrasts)
@

If we find no interaction but a significant main effect of
perspective, we need to do follow-up multiple comparisons to find out
where the difference is.

<<sidewalk-persp,results='asis'>>=
emm_sidewalk_persp <- emmeans(sidewalk_glmm, pairwise ~ perspective,
                              type = 'response')
xtable(emm_sidewalk_persp$contrasts)
@

If we find a main effect of motorist-type, we need to calculate the
marginal means to see the effect.

<<sidewalk-motorist,results='asis'>>=
emm_sidewalk_motorist <- emmeans(sidewalk_glmm, pairwise ~ motorist,
                                 type = 'response')
xtable(emm_sidewalk_motorist$contrasts)
@

\subsubsection{Confidence}

<<sidewalk-conf-model,results='asis'>>=
(nc <- detectCores())
cl <- makeCluster(rep("localhost", nc))
sidewalk_conf_lmm<- mixed(confidence ~ perspective * motorist * decision +
                        trial + gender +
                        opinAV + education +
                        drivExperience + perceivedIden + age_c +
                        (1 | participant.ID),
                    method = "KR", # change to PB for final
                    data = sidewalk.sub,
                    args_test = list(nsim = 1000, cl = cl), cl = cl)

stopCluster(cl)

xtable(sidewalk_conf_lmm$anova_table)

@

<<sidewalk-conf-resid>>=
sidewalk_conf_lmm.resid <- simulateResiduals(
    fittedModel = sidewalk_conf_lmm$full_model,
    n = 2000)

sidewalk_lmm_conf.plot <- plotSimulatedResiduals(
    simulationOutput = sidewalk_conf_lmm.resid)

testUniformity(sidewalk_conf_lmm.resid)

@
<<sidewalk-conf-followup,results='asis'>>=

sidewalk_conf_i3 <- emmeans(sidewalk_conf_lmm,
                            pairwise ~ perspective | motorist + decision)
xtable(sidewalk_conf_i3$contrasts)

sidewalk_conf_moto_persp_i <- emmeans(sidewalk_conf_lmm,
                                      pairwise ~ perspective | motorist)
xtable(sidewalk_conf_moto_persp_i$contrasts)

sidewalk_conf_lmm_moto_dec_i <- emmeans(sidewalk_conf_lmm,
                                        pairwise ~ motorist | decision)
xtable(sidewalk_conf_lmm_moto_dec_i$contrasts)

sidewalk_conf_lmm_persp_dec_i <- emmeans(sidewalk_conf_lmm,
                                         pairwise ~ perspective | decision)
xtable(sidewalk_conf_lmm_persp_dec_i$contrasts)

sidewalk_conf_lmm_dec <- emmeans(sidewalk_conf_lmm,
                                 pairwise ~ decision)
xtable(sidewalk_conf_lmm_dec$contrasts)

sidewalk_conf_lmm_moto <- emmeans(sidewalk_conf_lmm,
                                  pairwise ~ motorist)
xtable(sidewalk_conf_lmm_dec$contrasts)

sidewalk_conf_lmm_persp <- emmeans(sidewalk_conf_lmm,
                                   pairwise ~ perspective)
xtable(sidewalk_conf_lmm_persp$contrasts)
@

\section{Save R image}
\label{sec:save}

All done! The last thing to is save the R workspace so we don't have
to rerun the analysis to get the results again.

<<save-workspace>>=
save.image(file = "vr_accept.RData")
@

\end{document}
